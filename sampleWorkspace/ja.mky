let null = [1, 2][2];

let Option = fn(x) {
    if (x == null) {
        return fn() {};
    } else {
        return fn() {x};
    }
};

let unwrap = fn(opt) {
    return opt()
};

let optionMap = fn(opt, func) {
    let val = opt.unwrap()
    if (val) {
        return Option(func(val))
    } else {
        return null
    }
};

let arr_any = fn(arr, pred) {
    let iter = fn(arr) {
        if (arr.len() == 0) {
            return false;
        }
        if (pred(arr.first())) {
            return true;
        } else {
            return iter(arr.rest());
        } 
    };
    iter(arr);
};

let optionBind = fn(option, func) {
    let val = option()
    if (val) {
        return func(val)
    } else {
        return null
    }
};


let gett = fn(arr, i) {
    return Option(arr[i]);
};

let double = fn(x) {
    x + x
};

let z = double(2);
 
let optElem = gett([1, 2], 1);
let optMapped = optElem.optionMap(double);
puts(optMapped.unwrap())
puts([1, 2].arr_any {x -> x > 1})

