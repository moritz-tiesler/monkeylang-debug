let null = [1, 2][2];
let arr_any = fn(list, pred) {
    let iter = fn(arr) {
        if (arr.len() == 0) {
            return false;
        }
        if (pred(arr.first())) {
            return true;
        } else {
            return iter(arr.rest());
        } 
    };
    iter(list);
};
let some = if (true) {
    2
} else {
    4
};

let Option = fn(x) {
    if (x == null) {
        return fn() {};
    } else {
        return fn() {x};
    }
};
let optionBind = fn(option, func) {
    let val = option();
    if (val) {
        return func(val);
    } else {
        return null;
    }
};

let at = fn(arr, i) {
    Option(arr[i])
}
 
let elem = at([1, 2], 1);

let maybe = Option(3);

let unwrap = fn(opt) {
    return opt()
};

let optionMap = fn(opt, func) {
    let val = opt.unwrap()
    if (val) {
        return Option(func(val))
    } else {
        return null
    }
};

let bogus = 3;

let gett = fn(arr, i) {
    Option(arr[i])
};

let double = fn(x) {
    x + x 
};

 

puts([1, 2].arr_any {x -> x > 1});
let optElem = at([1, 2], 1);
let optMapped = optElem.optionMap(double);

let some = 4

